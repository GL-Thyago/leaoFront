import useAuth from '@/contexts/AuthContext';
import { getCookie } from '@/services/cookies';
import {
  Accordion,
  AccordionButton,
  AccordionPanel,
  AccordionIcon,
  Box, Button, HStack, Text, Image, Heading, ButtonGroup, Stack, RadioGroup, InputGroup, InputLeftElement, Input, Container, Spacer, Flex
} from '@chakra-ui/react'
import Head from 'next/head'
import api from '../services/api';

import Info from '../../components/InfoComponent';
import AccordionItemProps from '../../components/AcordionItem';
import { AddIcon, MinusIcon, PhoneIcon, WarningTwoIcon } from '@chakra-ui/icons';
import FooterJSX from '../../components/Footer';
import RadioPlans from '../../components/RadioPlans';
import { useRouter } from 'next/router';
import Images from 'next/image'
import SegmentedControl from '../../components/SegmentControl';
import { useRef, useState } from 'react';
import InputMask from "react-input-mask";
import { useForm } from "react-hook-form";


export default function Home() {
  const { login } = useAuth();
  const [isSelected, setIsSelected] = useState(null);
  const router = useRouter();
  const [isAlert, setIsAlert] = useState(null);
  const [messageAlert, setMessageAlert] = useState(null);
  // get a query parameter from the url
  const { invite_code = null } = router.query

  const {
    register,
    handleSubmit,
    watch,
    formState: { errors },
  } = useForm()


  const onSubmit = async (data) => {
    try{

      const post = await api.post('/cadastroClinteRifa',{
        email: data.email,
        nome: data.nome,
        cpf: data.cpf.replace(/[.-]/g, ''),
        dataNascimento: data.dataNascimento,
        cep: data.cep,
        telefone: data.telefone,
        senha: data.senha,
        uf: data.uf,
        codigo: invite_code
      });
    if (post.status === 200) {
      setIsAlert(true);
      setMessageAlert(post.data.msg);
    }

    }catch(e){
      setIsAlert(false);
      setMessageAlert(e.response.data.msg);
    }

  }


  return (
    <Box
    >
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Box width={"100%"} height={"50vh"} backgroundColor={"#c2c2c2"} />

      <Box width={"100%"} height={"50vh"} backgroundColor={"#ffff"} />

      <main style={{ maxWidth: '1420px', margin: 'auto' }}>


        <Box
          mt={10}
          mb={10}
          display={'flex'}
          width={'100%'}
          position={'absolute'}
          top={'15vh'}
          left={'0vw'}
          flexDirection={'column'}
        >
          <Box
            border={'2px solid #c2c2c2'}
            borderRadius={'5px'}
            m={'auto'}
            maxW={'1420px'}
            minW={{ base: 300, md: 700 }}
            maxWidth={600}
            p={5}
            backgroundColor={'#fff'}
            display={'flex'}
            flexDirection={'column'}
            alignItems={'center'}
          >
            <Text
              fontSize='xl'
              textAlign={'center'}
              fontWeight={'600'}
              letterSpacing={'0.5px'}
            >Crie sua conta</Text>

            {isAlert !== null &&  (
                <Box
                mt={5}
                backgroundColor={isAlert? 'green.100':'pink.100'}
                p={0.5}
                w={280}
                fontWeight={'600'}
                color={'#545454'}
                fontSize={'12px'}
                display={'flex'}
                alignItems={'center'}
                borderRadius={'3px'}
                >
                <WarningTwoIcon
                  w={'12px'}
                  m={2}
                  />
                <Text>
                  {messageAlert}
                </Text>
              </Box>
            )}

            <form 
            onError={errors => console.log(errors)}
            onSubmit={handleSubmit(onSubmit)}>
              <Stack
                p={5}
                w={'100%'}
                spacing={5}
              >

                <Flex
                  w={'100%'}
                  justifyContent={'space-around'}
                >
                  <Box>
                    <Text fontWeight={'semibold'}
                      letterSpacing={'0.5px'}
                    >Seu e-mail</Text>
                    <Input
                      p={2}
                      width={370}
                      size='sm'
                      fontWeight={'semibold'}
                      sx={{
                        _placeholder: {
                          color: '#c2c2c2',
                          fontWeight: '500',
                        }
                      }}
                      {...register('email', {
                        required: true,
                        pattern: {
                          value: /^[a-z0-9.]+@[a-z0-9]+\.[a-z]+(\.[a-z]+)?$/i,
                          message: 'Digite um email válido.'
                        }
                      })}
                      type='email' placeholder='Digite seu e-mail' />
                      {errors.mail &&  <Text color={'red'} fontSize={'2xs'}>Por favor, digite um email válido.</Text>}
                  </Box>

                  <Box>
                    <Text fontWeight={'semibold'}
                      letterSpacing={'0.5px'}
                    >Seu nome</Text>
                    <Input
                      p={2}
                      width={'100%'}
                      size='sm'
                      fontWeight={'semibold'}
                      sx={{
                        _placeholder: {
                          color: '#c2c2c2',
                          fontWeight: '500',
                        }
                      }}
                      {...register('nome', {
                        required: true,
                      })}
                      type='tel' placeholder='Digite seu nome' />
                      {errors.nome &&  <Text color={'red'} fontSize={'2xs'}>Por favor, digite um nome válido.</Text>}
                  </Box>
                </Flex>

                <Flex
                  justifyContent={'space-around'}
                >
                  {/* senha, nome, cpf, dataNascimento, email, uf, cep, telefone, codigo {codigo vem da url} */}  

                  <Box
                    w={60}
                    mx={2}
                  >
                    <Text fontWeight={'semibold'}
                      letterSpacing={'0.5px'}
                    >Senha</Text>
                    <Input
                      p={2}
                      width={'100%'}
                      size='sm'
                      fontWeight={'semibold'}
                      sx={{
                        _placeholder: {
                          color: '#c2c2c2',
                          fontWeight: '500',
                        }
                      }}
                      {...register('senha', {
                        required: true,
                        pattern: {
                          value: /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/,
                          message: 'Digite uma senha válida.'
                        }
                      })}
                      type='password' placeholder='Senha' />
                      {errors.senha &&  <Text color={'red'} fontSize={'2xs'}>Sua senha deve conter campos válidos.</Text>}
                  </Box>

                  <Box
                    w={80}

                  >
                    <Text fontWeight={'semibold'}
                      letterSpacing={'0.5px'}
                    >CPF</Text>
                    <Input
                      p={2}
                      width={'100%'}
                      size='sm'
                      as={InputMask} mask="999.999.999-99" 
                      maskChar={'_'}
                      fontWeight={'semibold'}
                      {...register('cpf', {
                          required: true,
                          pattern: {
                            value: /^[0-9]{3}.[0-9]{3}.[0-9]{3}-[0-9]{2}$/,
                            message: 'Digite um CPF válido.'
                          }
                        })
                      }
                      sx={{
                        _placeholder: {
                          color: '#c2c2c2',
                          fontWeight: '500',
                        }
                      }}
                      placeholder='Digite seu CPF' />
                      {errors.cpf &&  <Text color={'red'} fontSize={'2xs'}>Por favor, digite um CPF válido.</Text>}
                  </Box>

                </Flex>


                <Flex
                  justifyContent={'space-around'}
                >
                  <Box
                  marginX={2}
                  
                  >
                    <Text fontWeight={'semibold'}
                      letterSpacing={'0.5px'}
                    >CEP </Text>
                    <Input
                      as={InputMask} mask="99999-999" 
                      maskChar={'_'}
                      p={2}
                      fontWeight={'semibold'}
                      {...register('cep', {
                          required: true,
                          pattern: {
                            value: /^[0-9]{5}-[0-9]{3}$/,
                            message: 'Digite um CEP válido.'
                          }
                        })
                      }
                      sx={{
                        _placeholder: {
                          color: '#c2c2c2',
                          fontWeight: '500',
                        }
                      }}
                      width={'100%'}
                      size='sm'
                      placeholder='Seu CEP aqui' />
                      {errors.cep &&  <Text color={'red'} fontSize={'2xs'}>Por favor, digite um CEP válido.</Text>}
                  </Box>

                  <Box
                  maxW={10}
                  >
                    <Text fontWeight={'semibold'}
                      letterSpacing={'0.5px'}
                    >UF</Text>
                    <Input
                      as={InputMask} mask="aa" 
                      maskChar={'_'}
                      {...register('uf', {
                          required: true,
                          pattern: {
                            value: /^[A-Z]{2}$/i,
                            message: 'Digite um UF válido.'
                          }
                        })
                      }
                      p={2}
                      fontWeight={'semibold'}
                      sx={{
                        _placeholder: {
                          color: '#c2c2c2',
                          fontWeight: '500',
                        }
                      }}
                      width={'100%'}
                      size='sm'
                      placeholder='UF' />
                      {errors.telefone &&  <Text color={'red'} fontSize={'2xs'}>UF.</Text>}
                  </Box>

                  <Box
                  marginX={2}
                  
                  >
                    <Text fontWeight={'semibold'}
                      letterSpacing={'0.5px'}
                    >Data Nascimento </Text>
                    <Input
                      p={2}
                      fontWeight={'semibold'}
                      sx={{
                        _placeholder: {
                          color: '#c2c2c2',
                          fontWeight: '500',
                        }
                      }}
                      width={'100%'}
                      {...register('dataNascimento', {
                          required: true,
                        })
                      }
                      size='sm'
                      type='date' placeholder='Sua data de nascimento aqui' />
                      {errors.dataNascimento &&  <Text color={'red'} fontSize={'2xs'}>Por favor, digite uma data válida.</Text>}
                  </Box>

                  <Box>
                    <Text fontWeight={'semibold'}
                      letterSpacing={'0.5px'}
                    >Telefone</Text>
                    <Input
                      as={InputMask} mask="(99) 99999-9999" 
                      maskChar={'_'}
                      {...register('telefone', {
                          required: true,
                          pattern: {
                            value: /^\([1-9]{2}\) [0-9]{5}-[0-9]{4}$/,
                            message: 'Digite um telefone válido.'
                          }
                        })
                      }
                      p={2}
                      fontWeight={'semibold'}
                      sx={{
                        _placeholder: {
                          color: '#c2c2c2',
                          fontWeight: '500',
                        }
                      }}
                      width={'100%'}
                      size='sm'
                      placeholder='Seu telefone' />
                      {errors.telefone &&  <Text color={'red'} fontSize={'2xs'}>Por favor, digite uma telefone válido.</Text>}
                  </Box>
                  

                </Flex>



                <Button
                  backgroundColor={'#000'}
                  _hover={{ backgroundColor: '#000' }}
                  color={'#fff'}
                  type='submit'
                >Criar</Button>

              </Stack>
            </form>

          </Box>
        </Box>
      </main>
    </Box>
  )
}

export async function getServerSideProps(context) {
  const token = getCookie("token", context.req);

  if (token) {

    return {
      redirect: {
        destination: '/dashboard',
        permanent: false,
      },
    }
  }
  return {
    props: {
    },
  };
}
